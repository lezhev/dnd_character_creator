import 'package:dnd_character_creator/models/character_data.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class CharacterDataNotifier extends Notifier<CharacterData> {
  @override
  CharacterData build() {
    return CharacterData(
      characterName: 'name',
      characterRace: 'race',
      characterClass: 'class',
      level: 1,
      attributes: {
        'strength': 10,
        'dexterity': 10,
        'constitution': 10,
        'intelligence': 10,
        'wisdom': 10,
        'charisma': 10,
      },
      experience: 0,
      subClass: 'subClass',
      background: '',
      diceHit: '',
      maxHitPoints: 0,
      currentHitPoints: 0,
      temporaryHitPoints: 0,
      initiative: 0,
      speed: 0,
      armorClass: 0,
      inspyration: false,
      conditions: const [],
      exhaustion: 0,
      savingThrows: const [],
      proficiencyBonus: 0,
      attacks: const [],
      preparedSpells: const [],
      abilities: const [],
      languages: const [],
      tools: const [],
      weapons: const [],
      alignment: '',
      biography: '',
      weight: '',
      height: '',
      age: '',
      hairColor: '',
      eyeColor: '',
      skinColor: '',
      alliesAndOrganizations: '',
      purpose: '',
      ideals: '',
      bonds: '',
      flaws: '',
      notes: '',
      coins: const {},
      equipment: const [],
      tresuares: const [],
    );
  }

  void updateCharacterData({
    String? characterName,
    String? characterRace,
    String? characterClass,
    String? subClass,
    String? background,
    int? level,
    int? experience,
    String? diceHit,
    int? maxHitPoints,
    int? currentHitPoints,
    int? temporaryHitPoints,
    int? initiative,
    int? speed,
    int? armorClass,
    bool? inspyration,
    List<String>? conditions,
    int? exhaustion,
    Map<String, int>? attributes,
    List<String>? savingThrows,
    List<String>? skills,
    int? proficiencyBonus,
    List<Map<String, dynamic>>? attacks,
    List<String>? preparedSpells,
    List<String>? abilities,
    List<String>? languages,
    List<String>? tools,
    List<String>? weapons,
    String? alignment,
    String? biography,
    String? weight,
    String? height,
    String? age,
    String? hairColor,
    String? eyeColor,
    String? skinColor,
    String? alliesAndOrganizations,
    String? purpose,
    String? ideals,
    String? bonds,
    String? flaws,
    String? notes,
    Map<String, int>? coins,
    List<String>? equipment,
    List<String>? tresuares,
  }) {
    state = state.copyWith(
      characterName: characterName,
      characterRace: characterRace,
      characterClass: characterClass,
      subClass: subClass,
      background: background,
      level: level,
      experience: experience,
      diceHit: diceHit,
      maxHitPoints: maxHitPoints,
      currentHitPoints: currentHitPoints,
      temporaryHitPoints: temporaryHitPoints,
      initiative: initiative,
      speed: speed,
      armorClass: armorClass,
      inspyration: inspyration,
      conditions: conditions,
      exhaustion: exhaustion,
      attributes: attributes,
      savingThrows: savingThrows,
      skills: skills,
      proficiencyBonus: proficiencyBonus,
      attacks: attacks,
      preparedSpells: preparedSpells,
      abilities: abilities,
      languages: languages,
      tools: tools,
      weapons: weapons,
      alignment: alignment,
      biography: biography,
      weight: weight,
      height: height,
      age: age,
      hairColor: hairColor,
      eyeColor: eyeColor,
      skinColor: skinColor,
      alliesAndOrganizations: alliesAndOrganizations,
      purpose: purpose,
      ideals: ideals,
      bonds: bonds,
      flaws: flaws,
      notes: notes,
      coins: coins,
      equipment: equipment,
      tresuares: tresuares,
    );
  }
}

final characterDataNotifierProvider =
    NotifierProvider<CharacterDataNotifier, CharacterData>(
  () {
    return CharacterDataNotifier();
  },
);
